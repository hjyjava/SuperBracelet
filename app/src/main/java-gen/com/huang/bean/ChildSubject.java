package com.huang.bean;

import com.huang.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.huang.dao.ChildSubjectDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ChildSubject".
 */
public class ChildSubject {

    /** Not-null value. */
    private String Id;
    private String Anum;
    private String kaoshiname;
    private String kaoshitime;
    private String logo;
    private String moniname;
    private String monitime;
    private String name;
    private String rounds;
    private String rules;
    private String startdate;
    private String parentSubjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChildSubjectDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ChildSubject() {
    }

    public ChildSubject(String Id) {
        this.Id = Id;
    }

    public ChildSubject(String Id, String Anum, String kaoshiname, String kaoshitime, String logo, String moniname, String monitime, String name, String rounds, String rules, String startdate, String parentSubjectId) {
        this.Id = Id;
        this.Anum = Anum;
        this.kaoshiname = kaoshiname;
        this.kaoshitime = kaoshitime;
        this.logo = logo;
        this.moniname = moniname;
        this.monitime = monitime;
        this.name = name;
        this.rounds = rounds;
        this.rules = rules;
        this.startdate = startdate;
        this.parentSubjectId = parentSubjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChildSubjectDao() : null;
    }

    /** Not-null value. */
    public String getId() {
        return Id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(String Id) {
        this.Id = Id;
    }

    public String getAnum() {
        return Anum;
    }

    public void setAnum(String Anum) {
        this.Anum = Anum;
    }

    public String getKaoshiname() {
        return kaoshiname;
    }

    public void setKaoshiname(String kaoshiname) {
        this.kaoshiname = kaoshiname;
    }

    public String getKaoshitime() {
        return kaoshitime;
    }

    public void setKaoshitime(String kaoshitime) {
        this.kaoshitime = kaoshitime;
    }

    public String getLogo() {
        return logo;
    }

    public void setLogo(String logo) {
        this.logo = logo;
    }

    public String getMoniname() {
        return moniname;
    }

    public void setMoniname(String moniname) {
        this.moniname = moniname;
    }

    public String getMonitime() {
        return monitime;
    }

    public void setMonitime(String monitime) {
        this.monitime = monitime;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRounds() {
        return rounds;
    }

    public void setRounds(String rounds) {
        this.rounds = rounds;
    }

    public String getRules() {
        return rules;
    }

    public void setRules(String rules) {
        this.rules = rules;
    }

    public String getStartdate() {
        return startdate;
    }

    public void setStartdate(String startdate) {
        this.startdate = startdate;
    }

    public String getParentSubjectId() {
        return parentSubjectId;
    }

    public void setParentSubjectId(String parentSubjectId) {
        this.parentSubjectId = parentSubjectId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
