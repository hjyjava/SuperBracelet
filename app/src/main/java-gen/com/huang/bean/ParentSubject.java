package com.huang.bean;

import java.util.ArrayList;
import java.util.List;
import com.huang.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.huang.dao.ChildSubjectDao;
import com.huang.dao.ParentSubjectDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ParentSubject".
 */
public class ParentSubject {

    /** Not-null value. */
    private String Id;
    private String logo;
    private String name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParentSubjectDao myDao;

    private List<ChildSubject> kulist = new ArrayList<>();

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ParentSubject() {
    }

    public ParentSubject(String Id) {
        this.Id = Id;
    }

    public ParentSubject(String Id, String logo, String name) {
        this.Id = Id;
        this.logo = logo;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParentSubjectDao() : null;
    }

    /** Not-null value. */
    public String getId() {
        return Id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(String Id) {
        this.Id = Id;
    }

    public String getLogo() {
        return logo;
    }

    public void setLogo(String logo) {
        this.logo = logo;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ChildSubject> getKulist() {
        if (kulist == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChildSubjectDao targetDao = daoSession.getChildSubjectDao();
            List<ChildSubject> kulistNew = targetDao._queryParentSubject_Kulist(Id);
            synchronized (this) {
                if(kulist == null) {
                    kulist = kulistNew;
                }
            }
        }
        return kulist;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetKulist() {
        kulist = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
