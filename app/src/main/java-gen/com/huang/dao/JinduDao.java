package com.huang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huang.bean.Jindu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Jindu".
*/
public class JinduDao extends AbstractDao<Jindu, Long> {

    public static final String TABLENAME = "Jindu";

    /**
     * Properties of entity Jindu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StudentId = new Property(1, String.class, "studentId", false, "STUDENT_ID");
        public final static Property ChildSubjectId = new Property(2, String.class, "childSubjectId", false, "CHILD_SUBJECT_ID");
        public final static Property Addtime = new Property(3, String.class, "addtime", false, "ADDTIME");
        public final static Property Grade = new Property(4, String.class, "grade", false, "GRADE");
        public final static Property Num = new Property(5, String.class, "num", false, "NUM");
        public final static Property Rank = new Property(6, String.class, "rank", false, "RANK");
    };

    private DaoSession daoSession;


    public JinduDao(DaoConfig config) {
        super(config);
    }
    
    public JinduDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Jindu\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STUDENT_ID\" TEXT," + // 1: studentId
                "\"CHILD_SUBJECT_ID\" TEXT," + // 2: childSubjectId
                "\"ADDTIME\" TEXT," + // 3: addtime
                "\"GRADE\" TEXT," + // 4: grade
                "\"NUM\" TEXT," + // 5: num
                "\"RANK\" TEXT);"); // 6: rank
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Jindu\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Jindu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(2, studentId);
        }
 
        String childSubjectId = entity.getChildSubjectId();
        if (childSubjectId != null) {
            stmt.bindString(3, childSubjectId);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(4, addtime);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(5, grade);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(7, rank);
        }
    }

    @Override
    protected void attachEntity(Jindu entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Jindu readEntity(Cursor cursor, int offset) {
        Jindu entity = new Jindu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // studentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // childSubjectId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // grade
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // rank
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Jindu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChildSubjectId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGrade(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRank(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Jindu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Jindu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
