package com.huang.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.huang.bean.ChildSubject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ChildSubject".
*/
public class ChildSubjectDao extends AbstractDao<ChildSubject, String> {

    public static final String TABLENAME = "ChildSubject";

    /**
     * Properties of entity ChildSubject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property Anum = new Property(1, String.class, "Anum", false, "ANUM");
        public final static Property Kaoshiname = new Property(2, String.class, "kaoshiname", false, "KAOSHINAME");
        public final static Property Kaoshitime = new Property(3, String.class, "kaoshitime", false, "KAOSHITIME");
        public final static Property Logo = new Property(4, String.class, "logo", false, "LOGO");
        public final static Property Moniname = new Property(5, String.class, "moniname", false, "MONINAME");
        public final static Property Monitime = new Property(6, String.class, "monitime", false, "MONITIME");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Rounds = new Property(8, String.class, "rounds", false, "ROUNDS");
        public final static Property Rules = new Property(9, String.class, "rules", false, "RULES");
        public final static Property Startdate = new Property(10, String.class, "startdate", false, "STARTDATE");
        public final static Property ParentSubjectId = new Property(11, String.class, "parentSubjectId", false, "PARENT_SUBJECT_ID");
    };

    private DaoSession daoSession;

    private Query<ChildSubject> parentSubject_KulistQuery;

    public ChildSubjectDao(DaoConfig config) {
        super(config);
    }
    
    public ChildSubjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ChildSubject\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"ANUM\" TEXT," + // 1: Anum
                "\"KAOSHINAME\" TEXT," + // 2: kaoshiname
                "\"KAOSHITIME\" TEXT," + // 3: kaoshitime
                "\"LOGO\" TEXT," + // 4: logo
                "\"MONINAME\" TEXT," + // 5: moniname
                "\"MONITIME\" TEXT," + // 6: monitime
                "\"NAME\" TEXT," + // 7: name
                "\"ROUNDS\" TEXT," + // 8: rounds
                "\"RULES\" TEXT," + // 9: rules
                "\"STARTDATE\" TEXT," + // 10: startdate
                "\"PARENT_SUBJECT_ID\" TEXT);"); // 11: parentSubjectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ChildSubject\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChildSubject entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String Anum = entity.getAnum();
        if (Anum != null) {
            stmt.bindString(2, Anum);
        }
 
        String kaoshiname = entity.getKaoshiname();
        if (kaoshiname != null) {
            stmt.bindString(3, kaoshiname);
        }
 
        String kaoshitime = entity.getKaoshitime();
        if (kaoshitime != null) {
            stmt.bindString(4, kaoshitime);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String moniname = entity.getMoniname();
        if (moniname != null) {
            stmt.bindString(6, moniname);
        }
 
        String monitime = entity.getMonitime();
        if (monitime != null) {
            stmt.bindString(7, monitime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String rounds = entity.getRounds();
        if (rounds != null) {
            stmt.bindString(9, rounds);
        }
 
        String rules = entity.getRules();
        if (rules != null) {
            stmt.bindString(10, rules);
        }
 
        String startdate = entity.getStartdate();
        if (startdate != null) {
            stmt.bindString(11, startdate);
        }
 
        String parentSubjectId = entity.getParentSubjectId();
        if (parentSubjectId != null) {
            stmt.bindString(12, parentSubjectId);
        }
    }

    @Override
    protected void attachEntity(ChildSubject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChildSubject readEntity(Cursor cursor, int offset) {
        ChildSubject entity = new ChildSubject( //
            cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Anum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kaoshiname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kaoshitime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // moniname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // monitime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rounds
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rules
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // startdate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // parentSubjectId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChildSubject entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setAnum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKaoshiname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKaoshitime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMoniname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMonitime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRounds(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRules(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartdate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParentSubjectId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChildSubject entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChildSubject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "kulist" to-many relationship of ParentSubject. */
    public List<ChildSubject> _queryParentSubject_Kulist(String parentSubjectId) {
        synchronized (this) {
            if (parentSubject_KulistQuery == null) {
                QueryBuilder<ChildSubject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentSubjectId.eq(null));
                parentSubject_KulistQuery = queryBuilder.build();
            }
        }
        Query<ChildSubject> query = parentSubject_KulistQuery.forCurrentThread();
        query.setParameter(0, parentSubjectId);
        return query.list();
    }

}
